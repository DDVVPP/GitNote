generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  blurImage         String?
  location          String?
  onboardingStatus  Int?
  portfolio         String?
  role              Role      @default(USER)
  contributionGrid  String?
  goals             Goals[]
  knowledgeLevel    String[]
  techStack         String[]
  socialMedia       Social[]
  availability      Boolean?
  createdAt         DateTime  @default(now())
  startDate         DateTime?
  endDate           DateTime?
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  createType  CreateType
  description String
  codeEditor  String?
  content     String?
  steps       String[]
  learnings   String[]
  user        User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  tags        String[]
  resources   Resource[]
  userEmail   String
}

model Social {
  id        Int    @id @default(autoincrement())
  username  String?
  type      String?
  link      String?
  user      User @relation(fields: [userId], references: [id])
  userId    String
}
model Goals {
  id          Int    @id @default(autoincrement())
  name        String
  isComplete  Boolean
  user        User @relation(fields: [userId], references: [id])
  userId      String
}

model Resource {
  id          Int    @id @default(autoincrement())
  label       String?
  link        String?
  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
}

enum Role {
  USER
  ADMIN
}

enum CreateType {
  WORKFLOW
  COMPONENT
  KNOWLEDGE
}
