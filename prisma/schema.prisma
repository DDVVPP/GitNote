// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  location      String?
  role          Role     @default(USER)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                Int         @id @default(autoincrement())
  contributionGrid  String?
  portfolio         String?
  goals             String[]
  knowledge         String[]
  techStack         String[]
  socialMedia       Social[]
  availability      Boolean
  startDate         DateTime
  endDate           DateTime
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @unique
}

model Post {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  category    CategoryName
  description String
  content     Content    @relation(fields: [contentId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  tag         Tag[]
  resources   Resource[]
  contentId   Int
  userId      String
  resourceId  Int
}

model Social {
  id        Int    @id @default(autoincrement())
  username  String
  type      String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Resource {
  id    Int    @id @default(autoincrement())
  name  String
  link  String
  posts Post[]
}

model Content {
  id    Int    @id @default(autoincrement())
  text  String?
  link  String[]
  image String[]
  posts Post[]
}

enum Role {
  USER
  ADMIN
}

enum CategoryName {
  WORKFLOW
  COMPONENT
  KNOWLEDGE
}

// model Category {
//   id    Int    @id @default(autoincrement())
//   name  CategoryName
//   posts Post[]
// }

// model Location {
//   id      Int    @id @default(autoincrement())
//   city    String
//   country String
// }

// model Goals {
//   id      Int    @id @default(autoincrement())
//   name    String
//   profile Profile @relation(fields: [profileId], references: [id])
//   profileId Int
// }

// model Levels {
//   id        Int    @id @default(autoincrement())
//   name      String
//   profile   Profile @relation(fields: [profileId], references: [id])
//   profileId Int
// }

// model Tech {
//   id        Int    @id @default(autoincrement())
//   name      String
//   profile   Profile @relation(fields: [profileId], references: [id])
//   profileId Int
// }
